# Description, approach, challenge, and improvement
## Largest Integer Program 

This challenge asks us to process a number of integers in memory, find the largest one, and store the result in a specified memory address. To read the list of numbers in memory, one register holds the address of the start of the list. Another register (r2) holds the length of the list and serves as the loop counter. Register R0 is used to hold the maximum of the list. As the program goes through the loop, it begins by decrementing the loop counter. For each decrement, the number in the list to be evaluated is loaded into the register R1. The number is compared with the maximum, and if it is greater than the maximum, the value stored in the “maximum” register is replaced  in the latter section of the loop. Otherwise, it is skipped over. When the loop counter hits zero, it means that all numbers in the list has been traversed, and the loop terminates. At the end, the value in the “maximum” register is saved to memory. A challenge encountered involved distinguishing between a register storing an address and a register storing the content of that address. We finally understood that “LDR R1, =XX” means the address of XX is loaded onto R1, but “LDR R1, XX” means the content of XX is loaded onto R1. We could have improved the program to take in floats or to use absolute values when comparing negative numbers, but without a clear scope or purpose for the program, we could not evaluate the utility of such features, and did not include them for that reason. 

## Standard Deviation Program
This challenge asks us to approximate the standard deviation of a list of numbers by using the “range rule.” According to this rule, the standard deviation is approximately the result of finding the difference between maximum and minimum of the list and dividing the difference by four.  This approximation method avoids the need to take the square root, which would have been too difficult to implement at this point. The assembly code takes advantage of the logic used in Largest Integer program, and duplicates the loop to use one for the max and one for the min. In the same way described in part 1, the program finds the maximum of the list, but a second register was added to find the minimum. In the end, we subtract the “minimum” register from “maximum” register and shift the result logically to the right by two (equivalent to a division by four). Challenges: handling two conditional branches at the same time

