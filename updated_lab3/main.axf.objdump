
P:/G48_Lab3/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	f0 0d 00 00 fc 0d 00 00 08 0e 00 00 14 0e 00 00     ................
  30:	20 0e 00 00 30 12 00 00 98 0c 00 00 2c 0e 00 00      ...0.......,...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb00043c 	bl	11cc <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001318 	.word	0x00001318

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001750 	.word	0x00001750

00000124 <__cs3_heap_start_ptr>:
     124:	00001778 	.word	0x00001778

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00001758 	.word	0x00001758
     170:	0000175b 	.word	0x0000175b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00001758 	.word	0x00001758
     1bc:	00001758 	.word	0x00001758
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00001758 	.word	0x00001758
     200:	00000000 	.word	0x00000000
     204:	000012bc 	.word	0x000012bc

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000012bc 	.word	0x000012bc
     250:	0000175c 	.word	0x0000175c
     254:	00001318 	.word	0x00001318
     258:	00000000 	.word	0x00000000

0000025c <main>:
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/pushbuttons.h"
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/HPS_TIM.h"
#include "./drivers/inc/ISRs.h"
int main(){
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd040 	sub	sp, sp, #64	; 0x40
	HEX_write_ASM(y,x);
	
	
	}*/
	HPS_TIM_config_t hps_tim;
	hps_tim.tim = TIM0;
     268:	e3a03001 	mov	r3, #1
     26c:	e54b302c 	strb	r3, [r11, #-44]	; 0xffffffd4
	hps_tim.timeout = 10000; //1second??????????????
     270:	e3023710 	movw	r3, #10000	; 0x2710
     274:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	hps_tim.LD_en = 1;
     278:	e3a03001 	mov	r3, #1
     27c:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	hps_tim.INT_en = 1;
     280:	e3a03001 	mov	r3, #1
     284:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	hps_tim.enable = 1;
     288:	e3a03001 	mov	r3, #1
     28c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4

	HPS_TIM_config_ASM(&hps_tim); 
     290:	e24b302c 	sub	r3, r11, #44	; 0x2c
     294:	e1a00003 	mov	r0, r3
     298:	eb000185 	bl	8b4 <HPS_TIM_config_ASM>


	
	HPS_TIM_config_t hps_tim_pb;
	hps_tim_pb.tim = TIM1;
     29c:	e3a03002 	mov	r3, #2
     2a0:	e54b3040 	strb	r3, [r11, #-64]	; 0xffffffc0
	hps_tim_pb.timeout = 5000;//5 ms
     2a4:	e3013388 	movw	r3, #5000	; 0x1388
     2a8:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
	hps_tim_pb.LD_en = 1;
     2ac:	e3a03001 	mov	r3, #1
     2b0:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
	hps_tim_pb.INT_en = 1;
     2b4:	e3a03001 	mov	r3, #1
     2b8:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
	hps_tim_pb.enable = 1;
     2bc:	e3a03001 	mov	r3, #1
     2c0:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
	HPS_TIM_config_ASM(&hps_tim_pb); 
     2c4:	e24b3040 	sub	r3, r11, #64	; 0x40
     2c8:	e1a00003 	mov	r0, r3
     2cc:	eb000178 	bl	8b4 <HPS_TIM_config_ASM>

	int sec= 0;
     2d0:	e3a03000 	mov	r3, #0
     2d4:	e50b3008 	str	r3, [r11, #-8]
	int min=0;
     2d8:	e3a03000 	mov	r3, #0
     2dc:	e50b300c 	str	r3, [r11, #-12]
	int ms=0;
     2e0:	e3a03000 	mov	r3, #0
     2e4:	e50b3010 	str	r3, [r11, #-16]
	int isRunning=1;
     2e8:	e3a03001 	mov	r3, #1
     2ec:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     2f0:	ea000000 	b	2f8 <main+0x9c>
				//Set every number to 0
				HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5);
				HEX_write_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5, 0);
			}
}
}
     2f4:	e1a00000 	nop			; (mov r0, r0)
	int min=0;
	int ms=0;
	int isRunning=1;
	while(1){
	//printf("%d",sec);
	if(HPS_TIM_read_INT_ASM(TIM0)&&isRunning){
     2f8:	e3a00001 	mov	r0, #1
     2fc:	eb0001a1 	bl	988 <HPS_TIM_read_INT_ASM>
     300:	e1a03000 	mov	r3, r0
     304:	e3530000 	cmp	r3, #0
     308:	0a000007 	beq	32c <main+0xd0>
     30c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     310:	e3530000 	cmp	r3, #0
     314:	0a000004 	beq	32c <main+0xd0>
	HPS_TIM_clear_INT_ASM(TIM0);
     318:	e3a00001 	mov	r0, #1
     31c:	eb0001a8 	bl	9c4 <HPS_TIM_clear_INT_ASM>
	ms += 10;
     320:	e51b3010 	ldr	r3, [r11, #-16]
     324:	e283300a 	add	r3, r3, #10
     328:	e50b3010 	str	r3, [r11, #-16]
}
	if (ms >= 1000) {
     32c:	e51b2010 	ldr	r2, [r11, #-16]
     330:	e30033e7 	movw	r3, #999	; 0x3e7
     334:	e1520003 	cmp	r2, r3
     338:	da000013 	ble	38c <main+0x130>
				ms -= 1000;
     33c:	e51b3010 	ldr	r3, [r11, #-16]
     340:	e2433ffa 	sub	r3, r3, #1000	; 0x3e8
     344:	e50b3010 	str	r3, [r11, #-16]
				sec++;
     348:	e51b3008 	ldr	r3, [r11, #-8]
     34c:	e2833001 	add	r3, r3, #1
     350:	e50b3008 	str	r3, [r11, #-8]
				
				if (sec >= 60) {
     354:	e51b3008 	ldr	r3, [r11, #-8]
     358:	e353003b 	cmp	r3, #59	; 0x3b
     35c:	da00000a 	ble	38c <main+0x130>
					sec -= 60;
     360:	e51b3008 	ldr	r3, [r11, #-8]
     364:	e243303c 	sub	r3, r3, #60	; 0x3c
     368:	e50b3008 	str	r3, [r11, #-8]
					min++;
     36c:	e51b300c 	ldr	r3, [r11, #-12]
     370:	e2833001 	add	r3, r3, #1
     374:	e50b300c 	str	r3, [r11, #-12]
					if (min >= 60) {
     378:	e51b300c 	ldr	r3, [r11, #-12]
     37c:	e353003b 	cmp	r3, #59	; 0x3b
     380:	da000001 	ble	38c <main+0x130>
						min = 0;
     384:	e3a03000 	mov	r3, #0
     388:	e50b300c 	str	r3, [r11, #-12]
					}
				}
			}
	HEX_clear_ASM(HEX0|HEX1|HEX2|HEX3|HEX4|HEX5);
     38c:	e3a0003f 	mov	r0, #63	; 0x3f
     390:	eb000097 	bl	5f4 <HEX_clear_ASM>
	HEX_write_ASM(HEX0,(ms % 100) / 10)	;
     394:	e51b2010 	ldr	r2, [r11, #-16]
     398:	e308351f 	movw	r3, #34079	; 0x851f
     39c:	e34531eb 	movt	r3, #20971	; 0x51eb
     3a0:	e0c31293 	smull	r1, r3, r3, r2
     3a4:	e1a012c3 	asr	r1, r3, #5
     3a8:	e1a03fc2 	asr	r3, r2, #31
     3ac:	e0633001 	rsb	r3, r3, r1
     3b0:	e3a01064 	mov	r1, #100	; 0x64
     3b4:	e0030391 	mul	r3, r1, r3
     3b8:	e0633002 	rsb	r3, r3, r2
     3bc:	e3062667 	movw	r2, #26215	; 0x6667
     3c0:	e3462666 	movt	r2, #26214	; 0x6666
     3c4:	e0c21392 	smull	r1, r2, r2, r3
     3c8:	e1a02142 	asr	r2, r2, #2
     3cc:	e1a03fc3 	asr	r3, r3, #31
     3d0:	e0633002 	rsb	r3, r3, r2
     3d4:	e6ef3073 	uxtb	r3, r3
     3d8:	e3a00001 	mov	r0, #1
     3dc:	e1a01003 	mov	r1, r3
     3e0:	eb0000ad 	bl	69c <HEX_write_ASM>
	HEX_write_ASM(HEX1, ms / 100 );
     3e4:	e51b2010 	ldr	r2, [r11, #-16]
     3e8:	e308351f 	movw	r3, #34079	; 0x851f
     3ec:	e34531eb 	movt	r3, #20971	; 0x51eb
     3f0:	e0c31293 	smull	r1, r3, r3, r2
     3f4:	e1a012c3 	asr	r1, r3, #5
     3f8:	e1a03fc2 	asr	r3, r2, #31
     3fc:	e0633001 	rsb	r3, r3, r1
     400:	e6ef3073 	uxtb	r3, r3
     404:	e3a00002 	mov	r0, #2
     408:	e1a01003 	mov	r1, r3
     40c:	eb0000a2 	bl	69c <HEX_write_ASM>
	HEX_write_ASM(HEX2, (sec % 10) );
     410:	e51b1008 	ldr	r1, [r11, #-8]
     414:	e3063667 	movw	r3, #26215	; 0x6667
     418:	e3463666 	movt	r3, #26214	; 0x6666
     41c:	e0c32193 	smull	r2, r3, r3, r1
     420:	e1a02143 	asr	r2, r3, #2
     424:	e1a03fc1 	asr	r3, r1, #31
     428:	e0632002 	rsb	r2, r3, r2
     42c:	e1a03002 	mov	r3, r2
     430:	e1a03103 	lsl	r3, r3, #2
     434:	e0833002 	add	r3, r3, r2
     438:	e1a03083 	lsl	r3, r3, #1
     43c:	e0632001 	rsb	r2, r3, r1
     440:	e6ef3072 	uxtb	r3, r2
     444:	e3a00004 	mov	r0, #4
     448:	e1a01003 	mov	r1, r3
     44c:	eb000092 	bl	69c <HEX_write_ASM>
	HEX_write_ASM(HEX3, (sec / 10) );
     450:	e51b2008 	ldr	r2, [r11, #-8]
     454:	e3063667 	movw	r3, #26215	; 0x6667
     458:	e3463666 	movt	r3, #26214	; 0x6666
     45c:	e0c31293 	smull	r1, r3, r3, r2
     460:	e1a01143 	asr	r1, r3, #2
     464:	e1a03fc2 	asr	r3, r2, #31
     468:	e0633001 	rsb	r3, r3, r1
     46c:	e6ef3073 	uxtb	r3, r3
     470:	e3a00008 	mov	r0, #8
     474:	e1a01003 	mov	r1, r3
     478:	eb000087 	bl	69c <HEX_write_ASM>
	HEX_write_ASM(HEX4, (min % 10) );
     47c:	e51b100c 	ldr	r1, [r11, #-12]
     480:	e3063667 	movw	r3, #26215	; 0x6667
     484:	e3463666 	movt	r3, #26214	; 0x6666
     488:	e0c32193 	smull	r2, r3, r3, r1
     48c:	e1a02143 	asr	r2, r3, #2
     490:	e1a03fc1 	asr	r3, r1, #31
     494:	e0632002 	rsb	r2, r3, r2
     498:	e1a03002 	mov	r3, r2
     49c:	e1a03103 	lsl	r3, r3, #2
     4a0:	e0833002 	add	r3, r3, r2
     4a4:	e1a03083 	lsl	r3, r3, #1
     4a8:	e0632001 	rsb	r2, r3, r1
     4ac:	e6ef3072 	uxtb	r3, r2
     4b0:	e3a00010 	mov	r0, #16
     4b4:	e1a01003 	mov	r1, r3
     4b8:	eb000077 	bl	69c <HEX_write_ASM>
	HEX_write_ASM(HEX5, (min / 10) );
     4bc:	e51b200c 	ldr	r2, [r11, #-12]
     4c0:	e3063667 	movw	r3, #26215	; 0x6667
     4c4:	e3463666 	movt	r3, #26214	; 0x6666
     4c8:	e0c31293 	smull	r1, r3, r3, r2
     4cc:	e1a01143 	asr	r1, r3, #2
     4d0:	e1a03fc2 	asr	r3, r2, #31
     4d4:	e0633001 	rsb	r3, r3, r1
     4d8:	e6ef3073 	uxtb	r3, r3
     4dc:	e3a00020 	mov	r0, #32
     4e0:	e1a01003 	mov	r1, r3
     4e4:	eb00006c 	bl	69c <HEX_write_ASM>

	if(HPS_TIM_read_INT_ASM(TIM1)){
     4e8:	e3a00002 	mov	r0, #2
     4ec:	eb000125 	bl	988 <HPS_TIM_read_INT_ASM>
     4f0:	e1a03000 	mov	r3, r0
     4f4:	e3530000 	cmp	r3, #0
     4f8:	0affff7d 	beq	2f4 <main+0x98>
			HPS_TIM_clear_INT_ASM(TIM1);
     4fc:	e3a00002 	mov	r0, #2
     500:	eb00012f 	bl	9c4 <HPS_TIM_clear_INT_ASM>
			int pb = read_PB_data_ASM()&0xF;
     504:	eb0000ba 	bl	7f4 <read_PB_data_ASM>
     508:	e1a03000 	mov	r3, r0
     50c:	e203300f 	and	r3, r3, #15
     510:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
			if ((pb & 1) && (!isRunning)) { //Start timer
     514:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     518:	e2033001 	and	r3, r3, #1
     51c:	e3530000 	cmp	r3, #0
     520:	0a000005 	beq	53c <main+0x2e0>
     524:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     528:	e3530000 	cmp	r3, #0
     52c:	1a000002 	bne	53c <main+0x2e0>
				isRunning = 1;
     530:	e3a03001 	mov	r3, #1
     534:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     538:	ea00001b 	b	5ac <main+0x350>
			} else if ((pb & 2) && (isRunning)) { //Stop timer
     53c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     540:	e2033002 	and	r3, r3, #2
     544:	e3530000 	cmp	r3, #0
     548:	0a000005 	beq	564 <main+0x308>
     54c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     550:	e3530000 	cmp	r3, #0
     554:	0a000002 	beq	564 <main+0x308>
				isRunning = 0;
     558:	e3a03000 	mov	r3, #0
     55c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     560:	ea000011 	b	5ac <main+0x350>
			} else if (pb & 4) { //Reset timer
     564:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     568:	e2033004 	and	r3, r3, #4
     56c:	e3530000 	cmp	r3, #0
     570:	0affff5f 	beq	2f4 <main+0x98>
				ms = 0;
     574:	e3a03000 	mov	r3, #0
     578:	e50b3010 	str	r3, [r11, #-16]
				sec = 0;
     57c:	e3a03000 	mov	r3, #0
     580:	e50b3008 	str	r3, [r11, #-8]
				min = 0;
     584:	e3a03000 	mov	r3, #0
     588:	e50b300c 	str	r3, [r11, #-12]
				isRunning = 0; //Stop timer
     58c:	e3a03000 	mov	r3, #0
     590:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				
				//Set every number to 0
				HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5);
     594:	e3a0003f 	mov	r0, #63	; 0x3f
     598:	eb000015 	bl	5f4 <HEX_clear_ASM>
				HEX_write_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5, 0);
     59c:	e3a0003f 	mov	r0, #63	; 0x3f
     5a0:	e3a01000 	mov	r1, #0
     5a4:	eb00003c 	bl	69c <HEX_write_ASM>
			}
}
}
     5a8:	eaffff51 	b	2f4 <main+0x98>
     5ac:	eaffff50 	b	2f4 <main+0x98>

000005b0 <read_LEDs_ASM>:
	.text
	.equ SW_BASE, 0xFF200000
	.global read_LEDs_ASM

read_LEDs_ASM:
	PUSH {R1}
     5b0:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =SW_BASE
     5b4:	e59f101c 	ldr	r1, [pc, #28]	; 5d8 <write_LEDs_ASM+0x14>
	LDR R0, [R1]
     5b8:	e5910000 	ldr	r0, [r1]
	POP {R1}
     5bc:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
     5c0:	e12fff1e 	bx	lr

000005c4 <write_LEDs_ASM>:


	.global write_LEDs_ASM
write_LEDs_ASM:
	PUSH {R1}
     5c4:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =SW_BASE
     5c8:	e59f1008 	ldr	r1, [pc, #8]	; 5d8 <write_LEDs_ASM+0x14>
	STR R0, [R1]
     5cc:	e5810000 	str	r0, [r1]
	POP {R1}
     5d0:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
     5d4:	e12fff1e 	bx	lr
	.equ SW_BASE, 0xFF200000
	.global read_LEDs_ASM

read_LEDs_ASM:
	PUSH {R1}
	LDR R1, =SW_BASE
     5d8:	ff200000 	.word	0xff200000

000005dc <read_slider_switches_ASM>:
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	PUSH {R1}
     5dc:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =SW_BASE
     5e0:	e59f1008 	ldr	r1, [pc, #8]	; 5f0 <read_slider_switches_ASM+0x14>
	LDR R0, [R1]
     5e4:	e5910000 	ldr	r0, [r1]
	POP {R1}
     5e8:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
     5ec:	e12fff1e 	bx	lr
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	PUSH {R1}
	LDR R1, =SW_BASE
     5f0:	ff200040 	.word	0xff200040

000005f4 <HEX_clear_ASM>:
	.equ SW_ADDRESS_ONE, 0xFF200020
	.equ SW_ADDRESS_TWO, 0xFF200030
	.global HEX_clear_ASM

HEX_clear_ASM:
	PUSH {R0-R4}//pushes register used
     5f4:	e92d001f 	push	{r0, r1, r2, r3, r4}
	MOV R1, #127
     5f8:	e3a0107f 	mov	r1, #127	; 0x7f
	MOV R2, #1		
     5fc:	e3a02001 	mov	r2, #1

00000600 <LOOP1>:
LOOP1:
	CMP R2, #64
     600:	e3520040 	cmp	r2, #64	; 0x40
	BEQ DONE
     604:	0a00000d 	beq	640 <DONE>
	TST R0,R2
     608:	e1100002 	tst	r0, r2
	BNE CHOOSE_ADDRESS
     60c:	1a000002 	bne	61c <CHOOSE_ADDRESS>

00000610 <LOOP1_CONTINUED>:
LOOP1_CONTINUED:
	ROR R1, R1, #24
     610:	e1a01c61 	ror	r1, r1, #24
	LSL R2, R2, #1
     614:	e1a02082 	lsl	r2, r2, #1
	B LOOP1
     618:	eafffff8 	b	600 <LOOP1>

0000061c <CHOOSE_ADDRESS>:
CHOOSE_ADDRESS:
	CMP R2, #8
     61c:	e3520008 	cmp	r2, #8
	BGT SECOND_ADDRESS
     620:	ca000001 	bgt	62c <SECOND_ADDRESS>

00000624 <FIRST_ADDRESS>:
FIRST_ADDRESS:
	LDR R3, =SW_ADDRESS_ONE
     624:	e59f31c0 	ldr	r3, [pc, #448]	; 7ec <DONE3+0x8>
	B WRITE
     628:	ea000000 	b	630 <WRITE>

0000062c <SECOND_ADDRESS>:
SECOND_ADDRESS:
	LDR R3, =SW_ADDRESS_TWO
     62c:	e59f31bc 	ldr	r3, [pc, #444]	; 7f0 <DONE3+0xc>

00000630 <WRITE>:
WRITE:
	LDR R4, [R3]
     630:	e5934000 	ldr	r4, [r3]
	BIC R4, R1
     634:	e1c44001 	bic	r4, r4, r1
	STR R4, [R3]
     638:	e5834000 	str	r4, [r3]
	B LOOP1_CONTINUED
     63c:	eafffff3 	b	610 <LOOP1_CONTINUED>

00000640 <DONE>:

DONE:
	POP {R0-R4}
     640:	e8bd001f 	pop	{r0, r1, r2, r3, r4}
	BX LR
     644:	e12fff1e 	bx	lr

00000648 <HEX_flood_ASM>:
	

	.global HEX_flood_ASM
HEX_flood_ASM:
	PUSH {R0-R4}//pushes register used
     648:	e92d001f 	push	{r0, r1, r2, r3, r4}
	MOV R1, #127
     64c:	e3a0107f 	mov	r1, #127	; 0x7f
	
	MOV R2, #1		
     650:	e3a02001 	mov	r2, #1

00000654 <LOOP2>:
LOOP2:
	CMP R2, #64
     654:	e3520040 	cmp	r2, #64	; 0x40
	BEQ DONE2
     658:	0a00000d 	beq	694 <DONE2>
	TST R0,R2
     65c:	e1100002 	tst	r0, r2
	BNE CHOOSE_ADDRESS2
     660:	1a000002 	bne	670 <CHOOSE_ADDRESS2>

00000664 <LOOP2_CONTINUED>:
LOOP2_CONTINUED:
	ROR R1, R1, #24
     664:	e1a01c61 	ror	r1, r1, #24
	LSL R2, R2, #1
     668:	e1a02082 	lsl	r2, r2, #1
	B LOOP2
     66c:	eafffff8 	b	654 <LOOP2>

00000670 <CHOOSE_ADDRESS2>:
CHOOSE_ADDRESS2:
	CMP R2, #8
     670:	e3520008 	cmp	r2, #8
	BGT SECOND_ADDRESS2
     674:	ca000001 	bgt	680 <SECOND_ADDRESS2>

00000678 <FIRST_ADDRESS2>:
FIRST_ADDRESS2:
	LDR R3, =SW_ADDRESS_ONE
     678:	e59f316c 	ldr	r3, [pc, #364]	; 7ec <DONE3+0x8>
	B WRITE2
     67c:	ea000000 	b	684 <WRITE2>

00000680 <SECOND_ADDRESS2>:
SECOND_ADDRESS2:
	LDR R3, =SW_ADDRESS_TWO
     680:	e59f3168 	ldr	r3, [pc, #360]	; 7f0 <DONE3+0xc>

00000684 <WRITE2>:
WRITE2:
	LDR R4, [R3]
     684:	e5934000 	ldr	r4, [r3]
	ORR R4, R1
     688:	e1844001 	orr	r4, r4, r1
	STR R4, [R3]
     68c:	e5834000 	str	r4, [r3]
	B LOOP2_CONTINUED
     690:	eafffff3 	b	664 <LOOP2_CONTINUED>

00000694 <DONE2>:

DONE2:
	POP {R0-R4}
     694:	e8bd001f 	pop	{r0, r1, r2, r3, r4}
	BX LR
     698:	e12fff1e 	bx	lr

0000069c <HEX_write_ASM>:

	.global HEX_write_ASM
HEX_write_ASM:					
	PUSH {R0-R4}//pushes register used
     69c:	e92d001f 	push	{r0, r1, r2, r3, r4}
	CMP R1, #0
     6a0:	e3510000 	cmp	r1, #0
	BEQ display_0
     6a4:	0a00001d 	beq	720 <display_0>
	CMP R1, #1
     6a8:	e3510001 	cmp	r1, #1
	BEQ display_1
     6ac:	0a00001d 	beq	728 <display_1>
	CMP R1, #2
     6b0:	e3510002 	cmp	r1, #2
	BEQ display_2
     6b4:	0a00001d 	beq	730 <display_2>
	CMP R1, #3
     6b8:	e3510003 	cmp	r1, #3
	BEQ display_3
     6bc:	0a00001d 	beq	738 <display_3>
	CMP R1, #4
     6c0:	e3510004 	cmp	r1, #4
	BEQ display_4
     6c4:	0a00001d 	beq	740 <display_4>
	CMP R1, #5
     6c8:	e3510005 	cmp	r1, #5
	BEQ display_5
     6cc:	0a00001d 	beq	748 <display_5>
	CMP R1, #6
     6d0:	e3510006 	cmp	r1, #6
	BEQ display_6
     6d4:	0a00001d 	beq	750 <display_6>
	CMP R1, #7
     6d8:	e3510007 	cmp	r1, #7
	BEQ display_7
     6dc:	0a00001d 	beq	758 <display_7>
	CMP R1, #8
     6e0:	e3510008 	cmp	r1, #8
	BEQ display_8
     6e4:	0a00001d 	beq	760 <display_8>
	CMP R1, #9
     6e8:	e3510009 	cmp	r1, #9
	BEQ display_9
     6ec:	0a00001d 	beq	768 <display_9>
	CMP R1, #10
     6f0:	e351000a 	cmp	r1, #10
	BEQ display_10
     6f4:	0a00001d 	beq	770 <display_10>
	CMP R1, #11
     6f8:	e351000b 	cmp	r1, #11
	BEQ display_11
     6fc:	0a00001d 	beq	778 <display_11>
	CMP R1, #12
     700:	e351000c 	cmp	r1, #12
	BEQ display_12
     704:	0a00001d 	beq	780 <display_12>
	CMP R1, #13
     708:	e351000d 	cmp	r1, #13
	BEQ display_13
     70c:	0a00001d 	beq	788 <display_13>
	CMP R1, #14
     710:	e351000e 	cmp	r1, #14
	BEQ display_14
     714:	0a00001d 	beq	790 <display_14>
	CMP R1, #15
     718:	e351000f 	cmp	r1, #15
	BEQ display_15
     71c:	0a00001d 	beq	798 <display_15>

00000720 <display_0>:
display_0:MOV R1, #0x3F
     720:	e3a0103f 	mov	r1, #63	; 0x3f
	B CONTINUE
     724:	ea00001d 	b	7a0 <CONTINUE>

00000728 <display_1>:
display_1:
	MOV R1, #0x06
     728:	e3a01006 	mov	r1, #6
	B CONTINUE
     72c:	ea00001b 	b	7a0 <CONTINUE>

00000730 <display_2>:
display_2:
	MOV R1, #0x5B
     730:	e3a0105b 	mov	r1, #91	; 0x5b
	B CONTINUE
     734:	ea000019 	b	7a0 <CONTINUE>

00000738 <display_3>:
display_3:
	MOV R1, #0x4F
     738:	e3a0104f 	mov	r1, #79	; 0x4f
	B CONTINUE
     73c:	ea000017 	b	7a0 <CONTINUE>

00000740 <display_4>:
display_4:
	MOV R1, #0x66
     740:	e3a01066 	mov	r1, #102	; 0x66
	B CONTINUE
     744:	ea000015 	b	7a0 <CONTINUE>

00000748 <display_5>:
display_5:
	MOV R1, #0x6D
     748:	e3a0106d 	mov	r1, #109	; 0x6d
	B CONTINUE
     74c:	ea000013 	b	7a0 <CONTINUE>

00000750 <display_6>:
display_6:
	MOV R1, #0x7D
     750:	e3a0107d 	mov	r1, #125	; 0x7d
	B CONTINUE
     754:	ea000011 	b	7a0 <CONTINUE>

00000758 <display_7>:
display_7:
	MOV R1, #0x07
     758:	e3a01007 	mov	r1, #7
	B CONTINUE
     75c:	ea00000f 	b	7a0 <CONTINUE>

00000760 <display_8>:
display_8:
	MOV R1, #0x7F
     760:	e3a0107f 	mov	r1, #127	; 0x7f
	B CONTINUE
     764:	ea00000d 	b	7a0 <CONTINUE>

00000768 <display_9>:
display_9:
	MOV R1, #0x6F
     768:	e3a0106f 	mov	r1, #111	; 0x6f
	B CONTINUE
     76c:	ea00000b 	b	7a0 <CONTINUE>

00000770 <display_10>:
display_10:
	MOV R1, #0x77
     770:	e3a01077 	mov	r1, #119	; 0x77
	B CONTINUE
     774:	ea000009 	b	7a0 <CONTINUE>

00000778 <display_11>:
display_11:
	MOV R1, #0x7C
     778:	e3a0107c 	mov	r1, #124	; 0x7c
	B CONTINUE
     77c:	ea000007 	b	7a0 <CONTINUE>

00000780 <display_12>:
display_12:
	MOV R1, #0x39
     780:	e3a01039 	mov	r1, #57	; 0x39
	B CONTINUE
     784:	ea000005 	b	7a0 <CONTINUE>

00000788 <display_13>:
display_13:
	MOV R1, #0x5E
     788:	e3a0105e 	mov	r1, #94	; 0x5e
	B CONTINUE
     78c:	ea000003 	b	7a0 <CONTINUE>

00000790 <display_14>:
display_14:
	MOV R1, #0x79
     790:	e3a01079 	mov	r1, #121	; 0x79
	B CONTINUE
     794:	ea000001 	b	7a0 <CONTINUE>

00000798 <display_15>:
display_15:
	MOV R1, #0x71
     798:	e3a01071 	mov	r1, #113	; 0x71
	B CONTINUE
     79c:	eaffffff 	b	7a0 <CONTINUE>

000007a0 <CONTINUE>:

CONTINUE:
	MOV R2, #1		
     7a0:	e3a02001 	mov	r2, #1

000007a4 <LOOP3>:
LOOP3:
	CMP R2, #64
     7a4:	e3520040 	cmp	r2, #64	; 0x40
	BEQ DONE3
     7a8:	0a00000d 	beq	7e4 <DONE3>
	TST R0,R2
     7ac:	e1100002 	tst	r0, r2
	BNE CHOOSE_ADDRESS3
     7b0:	1a000002 	bne	7c0 <CHOOSE_ADDRESS3>

000007b4 <LOOP3_CONTINUED>:
LOOP3_CONTINUED:
	ROR R1, R1, #24
     7b4:	e1a01c61 	ror	r1, r1, #24
	LSL R2, R2, #1
     7b8:	e1a02082 	lsl	r2, r2, #1
	B LOOP3
     7bc:	eafffff8 	b	7a4 <LOOP3>

000007c0 <CHOOSE_ADDRESS3>:
CHOOSE_ADDRESS3:
	CMP R2, #8
     7c0:	e3520008 	cmp	r2, #8
	BGT SECOND_ADDRESS3
     7c4:	ca000001 	bgt	7d0 <SECOND_ADDRESS3>

000007c8 <FIRST_ADDRESS3>:
FIRST_ADDRESS3:
	LDR R3, =SW_ADDRESS_ONE
     7c8:	e59f301c 	ldr	r3, [pc, #28]	; 7ec <DONE3+0x8>
	B WRITE3
     7cc:	ea000000 	b	7d4 <WRITE3>

000007d0 <SECOND_ADDRESS3>:
SECOND_ADDRESS3:
	LDR R3, =SW_ADDRESS_TWO
     7d0:	e59f3018 	ldr	r3, [pc, #24]	; 7f0 <DONE3+0xc>

000007d4 <WRITE3>:
WRITE3:
	LDR R4, [R3]
     7d4:	e5934000 	ldr	r4, [r3]
	ORR R4, R1
     7d8:	e1844001 	orr	r4, r4, r1
	STR R4, [R3]
     7dc:	e5834000 	str	r4, [r3]
	B LOOP3_CONTINUED
     7e0:	eafffff3 	b	7b4 <LOOP3_CONTINUED>

000007e4 <DONE3>:

DONE3:
	POP {R0-R4}
     7e4:	e8bd001f 	pop	{r0, r1, r2, r3, r4}
	BX LR
     7e8:	e12fff1e 	bx	lr
	B LOOP1
CHOOSE_ADDRESS:
	CMP R2, #8
	BGT SECOND_ADDRESS
FIRST_ADDRESS:
	LDR R3, =SW_ADDRESS_ONE
     7ec:	ff200020 	.word	0xff200020
	B WRITE
SECOND_ADDRESS:
	LDR R3, =SW_ADDRESS_TWO
     7f0:	ff200030 	.word	0xff200030

000007f4 <read_PB_data_ASM>:
	.equ SW_int, 0xFF200058
	.equ SW_edge, 0xFF20005C
	.global read_PB_data_ASM

read_PB_data_ASM:		//read the current pressed push_button
	PUSH {R1}
     7f4:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =SW_DATA
     7f8:	e59f10a8 	ldr	r1, [pc, #168]	; 8a8 <disable_PB_INT_ASM+0x1c>
	LDR R0, [R1]
     7fc:	e5910000 	ldr	r0, [r1]
	POP {R1}
     800:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
     804:	e12fff1e 	bx	lr

00000808 <PB_data_is_pressed_ASM>:


	.global PB_data_is_pressed_ASM		//
PB_data_is_pressed_ASM:
	PUSH {R1,R2}
     808:	e92d0006 	push	{r1, r2}
	LDR R1, =SW_DATA
     80c:	e59f1094 	ldr	r1, [pc, #148]	; 8a8 <disable_PB_INT_ASM+0x1c>
	LDR R2, [R1]
     810:	e5912000 	ldr	r2, [r1]
	AND R2, R2, R0
     814:	e0022000 	and	r2, r2, r0
	MOVEQ R0, #0
     818:	03a00000 	moveq	r0, #0
	MOVNE R0, #1
     81c:	13a00001 	movne	r0, #1
	POP {R1,R2}
     820:	e8bd0006 	pop	{r1, r2}
	BX LR
     824:	e12fff1e 	bx	lr

00000828 <read_PB_edgecap_ASM>:

	.global read_PB_edgecap_ASM
read_PB_edgecap_ASM:
	PUSH {R1}
     828:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =SW_edge
     82c:	e59f1078 	ldr	r1, [pc, #120]	; 8ac <disable_PB_INT_ASM+0x20>
	LDR R0, [R1]
     830:	e5910000 	ldr	r0, [r1]
	POP {R1}
     834:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
     838:	e12fff1e 	bx	lr

0000083c <PB_edgecap_is_pressed_ASM>:


	.global PB_edgecap_is_pressed_ASM
PB_edgecap_is_pressed_ASM:
	PUSH {R1,R2}
     83c:	e92d0006 	push	{r1, r2}
	LDR R1, =SW_edge
     840:	e59f1064 	ldr	r1, [pc, #100]	; 8ac <disable_PB_INT_ASM+0x20>
	LDR R2, [R1]
     844:	e5912000 	ldr	r2, [r1]
	ANDS R2, R2, R0
     848:	e0122000 	ands	r2, r2, r0
	MOVEQ R0, #0
     84c:	03a00000 	moveq	r0, #0
	MOVNE R0, #1
     850:	13a00001 	movne	r0, #1
	POP {R1,R2}
     854:	e8bd0006 	pop	{r1, r2}
	BX LR
     858:	e12fff1e 	bx	lr

0000085c <PB_clear_edgecp_ASM>:

	.global PB_clear_edgecp_ASM
PB_clear_edgecp_ASM:
	PUSH {R1}
     85c:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	MOV R0, #0
     860:	e3a00000 	mov	r0, #0
	LDR R1, =SW_edge
     864:	e59f1040 	ldr	r1, [pc, #64]	; 8ac <disable_PB_INT_ASM+0x20>
	STR R0, [R1]
     868:	e5810000 	str	r0, [r1]
	POP {R1}
     86c:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
     870:	e12fff1e 	bx	lr

00000874 <enable_PB_INT_ASM>:

	.global enable_PB_INT_ASM
enable_PB_INT_ASM:
	PUSH {R1,R2}
     874:	e92d0006 	push	{r1, r2}
	LDR R1, =SW_int
     878:	e59f1030 	ldr	r1, [pc, #48]	; 8b0 <disable_PB_INT_ASM+0x24>
	AND R2, R0, #0xF
     87c:	e200200f 	and	r2, r0, #15
	STR R2, [R1]
     880:	e5812000 	str	r2, [r1]
	POP {R1,R2}
     884:	e8bd0006 	pop	{r1, r2}
	BX LR
     888:	e12fff1e 	bx	lr

0000088c <disable_PB_INT_ASM>:

	.global disable_PB_INT_ASM
disable_PB_INT_ASM:
	PUSH {R1,R2}
     88c:	e92d0006 	push	{r1, r2}
	LDR R1, =SW_int
     890:	e59f1018 	ldr	r1, [pc, #24]	; 8b0 <disable_PB_INT_ASM+0x24>
	LDR R2, [R1]
     894:	e5912000 	ldr	r2, [r1]
	BIC R2, R2, #0xF
     898:	e3c2200f 	bic	r2, r2, #15
	STR R2, [R1]
     89c:	e5812000 	str	r2, [r1]
	POP {R1,R2}	
     8a0:	e8bd0006 	pop	{r1, r2}
	BX LR
     8a4:	e12fff1e 	bx	lr
	.equ SW_edge, 0xFF20005C
	.global read_PB_data_ASM

read_PB_data_ASM:		//read the current pressed push_button
	PUSH {R1}
	LDR R1, =SW_DATA
     8a8:	ff200050 	.word	0xff200050
	BX LR

	.global read_PB_edgecap_ASM
read_PB_edgecap_ASM:
	PUSH {R1}
	LDR R1, =SW_edge
     8ac:	ff20005c 	.word	0xff20005c
	BX LR

	.global enable_PB_INT_ASM
enable_PB_INT_ASM:
	PUSH {R1,R2}
	LDR R1, =SW_int
     8b0:	ff200058 	.word	0xff200058

000008b4 <HPS_TIM_config_ASM>:
	.equ SW_BASE3, 0xFFD00000
	.equ SW_BASE4, 0xFFD01000
	
	.global HPS_TIM_config_ASM
HPS_TIM_config_ASM:		//given a struct pointer HPS_TIM_config_t, initialize a timer and set all proper variables
	PUSH {R4-R7, LR}	
     8b4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0			
     8b8:	e3a01000 	mov	r1, #0
	MOV R2, #1
     8bc:	e3a02001 	mov	r2, #1
	LDR R7, [R0]		
     8c0:	e5907000 	ldr	r7, [r0]
	B LOOP
     8c4:	eaffffff 	b	8c8 <LOOP>

000008c8 <LOOP>:

LOOP:
	TST R7, R2, LSL R1
     8c8:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
     8cc:	0a000000 	beq	8d4 <CONTINUE>
	BL CONFIG
     8d0:	eb000004 	bl	8e8 <CONFIG>

000008d4 <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
     8d4:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     8d8:	e3510004 	cmp	r1, #4
	BLT LOOP
     8dc:	bafffff9 	blt	8c8 <LOOP>

000008e0 <DONE>:

DONE:
	POP {R4-R7, LR}
     8e0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
     8e4:	e12fff1e 	bx	lr

000008e8 <CONFIG>:


CONFIG:
	PUSH {LR}
     8e8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
     8ec:	e59f3134 	ldr	r3, [pc, #308]	; a28 <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
     8f0:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
     8f4:	eb000005 	bl	910 <DISABLE>
	BL SET_LOAD_VAL
     8f8:	eb000008 	bl	920 <SET_LOAD_VAL>
	BL SET_LOAD_BIT
     8fc:	eb00000e 	bl	93c <SET_LOAD_BIT>
	BL SET_INT_BIT
     900:	eb000013 	bl	954 <SET_INT_BIT>
	BL SET_EN_BIT
     904:	eb000019 	bl	970 <SET_EN_BIT>
	
	POP {LR}
     908:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
     90c:	e12fff1e 	bx	lr

00000910 <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
     910:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
     914:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
     918:	e5845008 	str	r5, [r4, #8]
	BX LR
     91c:	e12fff1e 	bx	lr

00000920 <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
     920:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
     924:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
     928:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
     92c:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
     930:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
     934:	e5845000 	str	r5, [r4]
	BX LR
     938:	e12fff1e 	bx	lr

0000093c <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
     93c:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
     940:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
     944:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
     948:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
     94c:	e5845008 	str	r5, [r4, #8]
	BX LR
     950:	e12fff1e 	bx	lr

00000954 <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
     954:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
     958:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
     95c:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
     960:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
     964:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
     968:	e5845008 	str	r5, [r4, #8]
	BX LR
     96c:	e12fff1e 	bx	lr

00000970 <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
     970:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
     974:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
     978:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
     97c:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
     980:	e5845008 	str	r5, [r4, #8]
	BX LR
     984:	e12fff1e 	bx	lr

00000988 <HPS_TIM_read_INT_ASM>:
	
	

	.global HPS_TIM_read_INT_ASM
HPS_TIM_read_INT_ASM:
	PUSH {R1-R6}//push register
     988:	e92d007e 	push	{r1, r2, r3, r4, r5, r6}
	MOV R1, R0
     98c:	e1a01000 	mov	r1, r0
	AND R1, R1, #0xF
     990:	e201100f 	and	r1, r1, #15

00000994 <READ>:
READ:
	CMP R1, #1
     994:	e3510001 	cmp	r1, #1
	LDREQ R3, =SW_BASE1
     998:	059f308c 	ldreq	r3, [pc, #140]	; a2c <HPS_TIM_BASE+0x14>
	CMP R1, #2
     99c:	e3510002 	cmp	r1, #2
	LDREQ R3, =SW_BASE2
     9a0:	059f3088 	ldreq	r3, [pc, #136]	; a30 <HPS_TIM_BASE+0x18>
	CMP R1, #4
     9a4:	e3510004 	cmp	r1, #4
	LDREQ R3, =SW_BASE3
     9a8:	059f3084 	ldreq	r3, [pc, #132]	; a34 <HPS_TIM_BASE+0x1c>
	CMP R1, #8
     9ac:	e3510008 	cmp	r1, #8
	LDREQ R3, =SW_BASE4
     9b0:	059f3080 	ldreq	r3, [pc, #128]	; a38 <HPS_TIM_BASE+0x20>
	

	LDR R4, [R3, #0x10]
     9b4:	e5934010 	ldr	r4, [r3, #16]
	AND R0, R4, #1
     9b8:	e2040001 	and	r0, r4, #1

000009bc <DONE2>:
DONE2:
	POP {R1-R6}
     9bc:	e8bd007e 	pop	{r1, r2, r3, r4, r5, r6}
	BX LR
     9c0:	e12fff1e 	bx	lr

000009c4 <HPS_TIM_clear_INT_ASM>:


	.global HPS_TIM_clear_INT_ASM

HPS_TIM_clear_INT_ASM:
	PUSH {R1-R6}//push register
     9c4:	e92d007e 	push	{r1, r2, r3, r4, r5, r6}
	LDR R1, [R0]
     9c8:	e5901000 	ldr	r1, [r0]
	AND R1, R1, #0xF
     9cc:	e201100f 	and	r1, r1, #15
	MOV R2, #1
     9d0:	e3a02001 	mov	r2, #1

000009d4 <LOOP3>:
LOOP3:
	CMP R2, #16
     9d4:	e3520010 	cmp	r2, #16
	BEQ DONE3
     9d8:	0a000001 	beq	9e4 <DONE3>

	TST R1, R2
     9dc:	e1110002 	tst	r1, r2
	BEQ CLEAR
     9e0:	0a000001 	beq	9ec <CLEAR>

000009e4 <DONE3>:
	
DONE3:
	POP {R1-R6}
     9e4:	e8bd007e 	pop	{r1, r2, r3, r4, r5, r6}
	BX LR
     9e8:	e12fff1e 	bx	lr

000009ec <CLEAR>:
CLEAR:
	CMP R2, #1
     9ec:	e3520001 	cmp	r2, #1
	LDREQ R3, =SW_BASE1
     9f0:	059f3034 	ldreq	r3, [pc, #52]	; a2c <HPS_TIM_BASE+0x14>
	CMP R2, #2
     9f4:	e3520002 	cmp	r2, #2
	LDREQ R3, =SW_BASE2
     9f8:	059f3030 	ldreq	r3, [pc, #48]	; a30 <HPS_TIM_BASE+0x18>
	CMP R2, #4
     9fc:	e3520004 	cmp	r2, #4
	LDREQ R3, =SW_BASE3
     a00:	059f302c 	ldreq	r3, [pc, #44]	; a34 <HPS_TIM_BASE+0x1c>
	CMP R2, #8
     a04:	e3520008 	cmp	r2, #8
	LDREQ R3, =SW_BASE4
     a08:	059f3028 	ldreq	r3, [pc, #40]	; a38 <HPS_TIM_BASE+0x20>
	
	
	LDR R4, [R3, #0xC]//read F bit, clears timer
     a0c:	e593400c 	ldr	r4, [r3, #12]
	LSL R2, R2, #1
     a10:	e1a02082 	lsl	r2, r2, #1
	B LOOP3
     a14:	eaffffee 	b	9d4 <LOOP3>

00000a18 <HPS_TIM_BASE>:
     a18:	ffc08000 	.word	0xffc08000
     a1c:	ffc09000 	.word	0xffc09000
     a20:	ffd00000 	.word	0xffd00000
     a24:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
     a28:	00000a18 	.word	0x00000a18
	PUSH {R1-R6}//push register
	MOV R1, R0
	AND R1, R1, #0xF
READ:
	CMP R1, #1
	LDREQ R3, =SW_BASE1
     a2c:	ffc08000 	.word	0xffc08000
	CMP R1, #2
	LDREQ R3, =SW_BASE2
     a30:	ffc09000 	.word	0xffc09000
	CMP R1, #4
	LDREQ R3, =SW_BASE3
     a34:	ffd00000 	.word	0xffd00000
	CMP R1, #8
	LDREQ R3, =SW_BASE4
     a38:	ffd01000 	.word	0xffd01000

00000a3c <hps_tim0_int_flag>:
     a3c:	00000000 	.word	0x00000000

00000a40 <pb_int_flag>:
     a40:	00000000 	.word	0x00000000

00000a44 <A9_PRIV_TIM_ISR>:
hps_tim0_int_flag:
	.word 0x0
pb_int_flag:
	.word 0x0
A9_PRIV_TIM_ISR:
	BX LR
     a44:	e12fff1e 	bx	lr

00000a48 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     a48:	e12fff1e 	bx	lr

00000a4c <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}					
     a4c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	MOV R0, #0x1
     a50:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM	
     a54:	ebffffda 	bl	9c4 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag
     a58:	e59f0054 	ldr	r0, [pc, #84]	; ab4 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
     a5c:	e3a01001 	mov	r1, #1
	STR R1, [R0]				
     a60:	e5801000 	str	r1, [r0]

	POP {LR}
     a64:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     a68:	e12fff1e 	bx	lr

00000a6c <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     a6c:	e12fff1e 	bx	lr

00000a70 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     a70:	e12fff1e 	bx	lr

00000a74 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     a74:	e12fff1e 	bx	lr

00000a78 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     a78:	e12fff1e 	bx	lr

00000a7c <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}					
     a7c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	BL read_PB_edgecap_ASM		//read pushbutton edges to determine if it is pressed
     a80:	ebffff68 	bl	828 <read_PB_edgecap_ASM>

	LDR R1, =pb_int_flag
     a84:	e59f102c 	ldr	r1, [pc, #44]	; ab8 <FPGA_PS2_DUAL_ISR+0x8>
	STR R0, [R1]				
     a88:	e5810000 	str	r0, [r1]

	BL PB_clear_edgecp_ASM		//clear edgecap
     a8c:	ebffff72 	bl	85c <PB_clear_edgecp_ASM>

	POP {LR}
     a90:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     a94:	e12fff1e 	bx	lr

00000a98 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     a98:	e12fff1e 	bx	lr

00000a9c <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     a9c:	e12fff1e 	bx	lr

00000aa0 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     aa0:	e12fff1e 	bx	lr

00000aa4 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     aa4:	e12fff1e 	bx	lr

00000aa8 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     aa8:	e12fff1e 	bx	lr

00000aac <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     aac:	e12fff1e 	bx	lr

00000ab0 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     ab0:	e12fff1e 	bx	lr
	PUSH {LR}					

	MOV R0, #0x1
	BL HPS_TIM_clear_INT_ASM	

	LDR R0, =hps_tim0_int_flag
     ab4:	00000a3c 	.word	0x00000a3c
FPGA_PB_KEYS_ISR:
	PUSH {LR}					

	BL read_PB_edgecap_ASM		//read pushbutton edges to determine if it is pressed

	LDR R1, =pb_int_flag
     ab8:	00000a40 	.word	0x00000a40

00000abc <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     abc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ac0:	e28db000 	add	r11, sp, #0
     ac4:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     ac8:	e3a030d3 	mov	r3, #211	; 0xd3
     acc:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     ad0:	e51b3008 	ldr	r3, [r11, #-8]
     ad4:	e129f003 	msr	CPSR_fc, r3
}
     ad8:	e28bd000 	add	sp, r11, #0
     adc:	e8bd0800 	ldmfd	sp!, {r11}
     ae0:	e12fff1e 	bx	lr

00000ae4 <enable_A9_interrupts>:

void enable_A9_interrupts() {
     ae4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ae8:	e28db000 	add	r11, sp, #0
     aec:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     af0:	e3a03053 	mov	r3, #83	; 0x53
     af4:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     af8:	e51b3008 	ldr	r3, [r11, #-8]
     afc:	e129f003 	msr	CPSR_fc, r3
}
     b00:	e28bd000 	add	sp, r11, #0
     b04:	e8bd0800 	ldmfd	sp!, {r11}
     b08:	e12fff1e 	bx	lr

00000b0c <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     b0c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b10:	e28db000 	add	r11, sp, #0
     b14:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     b18:	e3e03007 	mvn	r3, #7
     b1c:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     b20:	e3a030d2 	mov	r3, #210	; 0xd2
     b24:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     b28:	e51b300c 	ldr	r3, [r11, #-12]
     b2c:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     b30:	e51b3008 	ldr	r3, [r11, #-8]
     b34:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     b38:	e3a030d3 	mov	r3, #211	; 0xd3
     b3c:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     b40:	e51b300c 	ldr	r3, [r11, #-12]
     b44:	e129f003 	msr	CPSR_fc, r3
}
     b48:	e28bd000 	add	sp, r11, #0
     b4c:	e8bd0800 	ldmfd	sp!, {r11}
     b50:	e12fff1e 	bx	lr

00000b54 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     b54:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b58:	e28db000 	add	r11, sp, #0
     b5c:	e24dd01c 	sub	sp, sp, #28
     b60:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     b64:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     b68:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     b6c:	e1a031c3 	asr	r3, r3, #3
     b70:	e3c33003 	bic	r3, r3, #3
     b74:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     b78:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     b7c:	e203301f 	and	r3, r3, #31
     b80:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     b84:	e3a02001 	mov	r2, #1
     b88:	e51b300c 	ldr	r3, [r11, #-12]
     b8c:	e1a03312 	lsl	r3, r2, r3
     b90:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     b94:	e51b3008 	ldr	r3, [r11, #-8]
     b98:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     b9c:	e2433c03 	sub	r3, r3, #768	; 0x300
     ba0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     ba4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     ba8:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     bac:	e5921000 	ldr	r1, [r2]
     bb0:	e51b2010 	ldr	r2, [r11, #-16]
     bb4:	e1812002 	orr	r2, r1, r2
     bb8:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     bbc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     bc0:	e3c33003 	bic	r3, r3, #3
     bc4:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     bc8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     bcc:	e2033003 	and	r3, r3, #3
     bd0:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     bd4:	e51b2008 	ldr	r2, [r11, #-8]
     bd8:	e51b300c 	ldr	r3, [r11, #-12]
     bdc:	e0823003 	add	r3, r2, r3
     be0:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     be4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     be8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     bec:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     bf0:	e6ef2072 	uxtb	r2, r2
     bf4:	e5c32000 	strb	r2, [r3]
}
     bf8:	e28bd000 	add	sp, r11, #0
     bfc:	e8bd0800 	ldmfd	sp!, {r11}
     c00:	e12fff1e 	bx	lr

00000c04 <config_GIC>:

void config_GIC(int len, int* IDs) {
     c04:	e92d4800 	push	{r11, lr}
     c08:	e28db004 	add	r11, sp, #4
     c0c:	e24dd010 	sub	sp, sp, #16
     c10:	e50b0010 	str	r0, [r11, #-16]
     c14:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     c18:	e3a03000 	mov	r3, #0
     c1c:	e50b3008 	str	r3, [r11, #-8]
     c20:	ea00000a 	b	c50 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
     c24:	e51b3008 	ldr	r3, [r11, #-8]
     c28:	e1a03103 	lsl	r3, r3, #2
     c2c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     c30:	e0823003 	add	r3, r2, r3
     c34:	e5933000 	ldr	r3, [r3]
     c38:	e1a00003 	mov	r0, r3
     c3c:	e3a01001 	mov	r1, #1
     c40:	ebffffc3 	bl	b54 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     c44:	e51b3008 	ldr	r3, [r11, #-8]
     c48:	e2833001 	add	r3, r3, #1
     c4c:	e50b3008 	str	r3, [r11, #-8]
     c50:	e51b2008 	ldr	r2, [r11, #-8]
     c54:	e51b3010 	ldr	r3, [r11, #-16]
     c58:	e1520003 	cmp	r2, r3
     c5c:	bafffff0 	blt	c24 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     c60:	e30c3104 	movw	r3, #49412	; 0xc104
     c64:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     c68:	e30f2fff 	movw	r2, #65535	; 0xffff
     c6c:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     c70:	e3a03cc1 	mov	r3, #49408	; 0xc100
     c74:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     c78:	e3a02001 	mov	r2, #1
     c7c:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     c80:	e3a03a0d 	mov	r3, #53248	; 0xd000
     c84:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     c88:	e3a02001 	mov	r2, #1
     c8c:	e5832000 	str	r2, [r3]
}
     c90:	e24bd004 	sub	sp, r11, #4
     c94:	e8bd8800 	pop	{r11, pc}

00000c98 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     c98:	e24ee004 	sub	lr, lr, #4
     c9c:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     ca0:	e28db018 	add	r11, sp, #24
     ca4:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     ca8:	e30c310c 	movw	r3, #49420	; 0xc10c
     cac:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     cb0:	e5933000 	ldr	r3, [r3]
     cb4:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     cb8:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     cbc:	e3530053 	cmp	r3, #83	; 0x53
     cc0:	0a00003d 	beq	dbc <__cs3_isr_irq+0x124>
     cc4:	e3530053 	cmp	r3, #83	; 0x53
     cc8:	ca000011 	bgt	d14 <__cs3_isr_irq+0x7c>
     ccc:	e353004e 	cmp	r3, #78	; 0x4e
     cd0:	0a000031 	beq	d9c <__cs3_isr_irq+0x104>
     cd4:	e353004e 	cmp	r3, #78	; 0x4e
     cd8:	ca000006 	bgt	cf8 <__cs3_isr_irq+0x60>
     cdc:	e3530048 	cmp	r3, #72	; 0x48
     ce0:	0a000029 	beq	d8c <__cs3_isr_irq+0xf4>
     ce4:	e3530049 	cmp	r3, #73	; 0x49
     ce8:	0a000029 	beq	d94 <__cs3_isr_irq+0xfc>
     cec:	e353001d 	cmp	r3, #29
     cf0:	0a000019 	beq	d5c <__cs3_isr_irq+0xc4>
     cf4:	ea000036 	b	dd4 <__cs3_isr_irq+0x13c>
     cf8:	e3530050 	cmp	r3, #80	; 0x50
     cfc:	0a00002a 	beq	dac <__cs3_isr_irq+0x114>
     d00:	e3530050 	cmp	r3, #80	; 0x50
     d04:	ba000026 	blt	da4 <__cs3_isr_irq+0x10c>
     d08:	e3530051 	cmp	r3, #81	; 0x51
     d0c:	0a000028 	beq	db4 <__cs3_isr_irq+0x11c>
     d10:	ea00002f 	b	dd4 <__cs3_isr_irq+0x13c>
     d14:	e35300c7 	cmp	r3, #199	; 0xc7
     d18:	0a000013 	beq	d6c <__cs3_isr_irq+0xd4>
     d1c:	e35300c7 	cmp	r3, #199	; 0xc7
     d20:	ca000006 	bgt	d40 <__cs3_isr_irq+0xa8>
     d24:	e3530059 	cmp	r3, #89	; 0x59
     d28:	0a000027 	beq	dcc <__cs3_isr_irq+0x134>
     d2c:	e35300c5 	cmp	r3, #197	; 0xc5
     d30:	0a00000b 	beq	d64 <__cs3_isr_irq+0xcc>
     d34:	e3530054 	cmp	r3, #84	; 0x54
     d38:	0a000021 	beq	dc4 <__cs3_isr_irq+0x12c>
     d3c:	ea000024 	b	dd4 <__cs3_isr_irq+0x13c>
     d40:	e35300c9 	cmp	r3, #201	; 0xc9
     d44:	0a00000c 	beq	d7c <__cs3_isr_irq+0xe4>
     d48:	e35300c9 	cmp	r3, #201	; 0xc9
     d4c:	ba000008 	blt	d74 <__cs3_isr_irq+0xdc>
     d50:	e35300ca 	cmp	r3, #202	; 0xca
     d54:	0a00000a 	beq	d84 <__cs3_isr_irq+0xec>
     d58:	ea00001d 	b	dd4 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     d5c:	ebffff38 	bl	a44 <A9_PRIV_TIM_ISR>
     d60:	ea00001c 	b	dd8 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     d64:	ebffff37 	bl	a48 <HPS_GPIO1_ISR>
     d68:	ea00001a 	b	dd8 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     d6c:	ebffff36 	bl	a4c <HPS_TIM0_ISR>
     d70:	ea000018 	b	dd8 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     d74:	ebffff3c 	bl	a6c <HPS_TIM1_ISR>
     d78:	ea000016 	b	dd8 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     d7c:	ebffff3b 	bl	a70 <HPS_TIM2_ISR>
     d80:	ea000014 	b	dd8 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     d84:	ebffff3a 	bl	a74 <HPS_TIM3_ISR>
     d88:	ea000012 	b	dd8 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     d8c:	ebffff39 	bl	a78 <FPGA_INTERVAL_TIM_ISR>
     d90:	ea000010 	b	dd8 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     d94:	ebffff38 	bl	a7c <FPGA_PB_KEYS_ISR>
     d98:	ea00000e 	b	dd8 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     d9c:	ebffff3d 	bl	a98 <FPGA_Audio_ISR>
     da0:	ea00000c 	b	dd8 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     da4:	ebffff3c 	bl	a9c <FPGA_PS2_ISR>
     da8:	ea00000a 	b	dd8 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     dac:	ebffff3b 	bl	aa0 <FPGA_JTAG_ISR>
     db0:	ea000008 	b	dd8 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     db4:	ebffff3a 	bl	aa4 <FPGA_IrDA_ISR>
     db8:	ea000006 	b	dd8 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     dbc:	ebffff39 	bl	aa8 <FPGA_JP1_ISR>
     dc0:	ea000004 	b	dd8 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     dc4:	ebffff38 	bl	aac <FPGA_JP2_ISR>
     dc8:	ea000002 	b	dd8 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     dcc:	ebffff37 	bl	ab0 <FPGA_PS2_DUAL_ISR>
     dd0:	ea000000 	b	dd8 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     dd4:	eafffffe 	b	dd4 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     dd8:	e30c3110 	movw	r3, #49424	; 0xc110
     ddc:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     de0:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     de4:	e5832000 	str	r2, [r3]
}
     de8:	e24bd018 	sub	sp, r11, #24
     dec:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000df0 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     df0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     df4:	e28db000 	add	r11, sp, #0
	while(1);
     df8:	eafffffe 	b	df8 <__cs3_reset+0x8>

00000dfc <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     dfc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     e00:	e28db000 	add	r11, sp, #0
	while(1);
     e04:	eafffffe 	b	e04 <__cs3_isr_undef+0x8>

00000e08 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     e08:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     e0c:	e28db000 	add	r11, sp, #0
	while(1);
     e10:	eafffffe 	b	e10 <__cs3_isr_swi+0x8>

00000e14 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     e14:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     e18:	e28db000 	add	r11, sp, #0
	while(1);
     e1c:	eafffffe 	b	e1c <__cs3_isr_pabort+0x8>

00000e20 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     e20:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     e24:	e28db000 	add	r11, sp, #0
	while(1);
     e28:	eafffffe 	b	e28 <__cs3_isr_dabort+0x8>

00000e2c <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     e2c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     e30:	e28db000 	add	r11, sp, #0
	while(1);
     e34:	eafffffe 	b	e34 <__cs3_isr_fiq+0x8>

00000e38 <fix_bug>:
}

void fix_bug() {
     e38:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     e3c:	e28db000 	add	r11, sp, #0
     e40:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
     e44:	e30d3198 	movw	r3, #53656	; 0xd198
     e48:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     e4c:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
     e50:	e51b3008 	ldr	r3, [r11, #-8]
     e54:	e3a02703 	mov	r2, #786432	; 0xc0000
     e58:	e5832000 	str	r2, [r3]
}
     e5c:	e28bd000 	add	sp, r11, #0
     e60:	e8bd0800 	ldmfd	sp!, {r11}
     e64:	e12fff1e 	bx	lr

00000e68 <int_setup>:

void int_setup(int len, int* IDs) {
     e68:	e92d4800 	push	{r11, lr}
     e6c:	e28db004 	add	r11, sp, #4
     e70:	e24dd008 	sub	sp, sp, #8
     e74:	e50b0008 	str	r0, [r11, #-8]
     e78:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
     e7c:	ebffff0e 	bl	abc <disable_A9_interrupts>
	set_A9_IRQ_stack();
     e80:	ebffff21 	bl	b0c <set_A9_IRQ_stack>
	fix_bug();
     e84:	ebffffeb 	bl	e38 <fix_bug>
	config_GIC(len, IDs);
     e88:	e51b0008 	ldr	r0, [r11, #-8]
     e8c:	e51b100c 	ldr	r1, [r11, #-12]
     e90:	ebffff5b 	bl	c04 <config_GIC>
	enable_A9_interrupts();
     e94:	ebffff12 	bl	ae4 <enable_A9_interrupts>
}
     e98:	e24bd004 	sub	sp, r11, #4
     e9c:	e8bd8800 	pop	{r11, pc}

00000ea0 <atexit>:
     ea0:	e1a01000 	mov	r1, r0
     ea4:	e3a00000 	mov	r0, #0
     ea8:	e92d4008 	push	{r3, lr}
     eac:	e1a02000 	mov	r2, r0
     eb0:	e1a03000 	mov	r3, r0
     eb4:	eb00000e 	bl	ef4 <__register_exitproc>
     eb8:	e8bd4008 	pop	{r3, lr}
     ebc:	e12fff1e 	bx	lr

00000ec0 <exit>:
     ec0:	e92d4008 	push	{r3, lr}
     ec4:	e3a01000 	mov	r1, #0
     ec8:	e1a04000 	mov	r4, r0
     ecc:	eb000045 	bl	fe8 <__call_exitprocs>
     ed0:	e59f3018 	ldr	r3, [pc, #24]	; ef0 <exit+0x30>
     ed4:	e5930000 	ldr	r0, [r3]
     ed8:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     edc:	e3530000 	cmp	r3, #0
     ee0:	11a0e00f 	movne	lr, pc
     ee4:	112fff13 	bxne	r3
     ee8:	e1a00004 	mov	r0, r4
     eec:	eb0000c9 	bl	1218 <_exit>
     ef0:	000012c0 	.word	0x000012c0

00000ef4 <__register_exitproc>:
     ef4:	e59fc0e4 	ldr	r12, [pc, #228]	; fe0 <__register_exitproc+0xec>
     ef8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     efc:	e59c4000 	ldr	r4, [r12]
     f00:	e594c148 	ldr	r12, [r4, #328]	; 0x148
     f04:	e35c0000 	cmp	r12, #0
     f08:	0284cf53 	addeq	r12, r4, #332	; 0x14c
     f0c:	e59c5004 	ldr	r5, [r12, #4]
     f10:	0584c148 	streq	r12, [r4, #328]	; 0x148
     f14:	e355001f 	cmp	r5, #31
     f18:	e24dd010 	sub	sp, sp, #16
     f1c:	e1a06000 	mov	r6, r0
     f20:	da000015 	ble	f7c <__register_exitproc+0x88>
     f24:	e59f00b8 	ldr	r0, [pc, #184]	; fe4 <__register_exitproc+0xf0>
     f28:	e3500000 	cmp	r0, #0
     f2c:	1a000001 	bne	f38 <__register_exitproc+0x44>
     f30:	e3e00000 	mvn	r0, #0
     f34:	ea000018 	b	f9c <__register_exitproc+0xa8>
     f38:	e3a00e19 	mov	r0, #400	; 0x190
     f3c:	e58d100c 	str	r1, [sp, #12]
     f40:	e58d2008 	str	r2, [sp, #8]
     f44:	e58d3004 	str	r3, [sp, #4]
     f48:	e320f000 	nop	{0}
     f4c:	e250c000 	subs	r12, r0, #0
     f50:	e59d100c 	ldr	r1, [sp, #12]
     f54:	e59d2008 	ldr	r2, [sp, #8]
     f58:	e59d3004 	ldr	r3, [sp, #4]
     f5c:	0afffff3 	beq	f30 <__register_exitproc+0x3c>
     f60:	e5945148 	ldr	r5, [r4, #328]	; 0x148
     f64:	e3a00000 	mov	r0, #0
     f68:	e58c0004 	str	r0, [r12, #4]
     f6c:	e58c5000 	str	r5, [r12]
     f70:	e584c148 	str	r12, [r4, #328]	; 0x148
     f74:	e58c0188 	str	r0, [r12, #392]	; 0x188
     f78:	e58c018c 	str	r0, [r12, #396]	; 0x18c
     f7c:	e3560000 	cmp	r6, #0
     f80:	e59c4004 	ldr	r4, [r12, #4]
     f84:	1a000007 	bne	fa8 <__register_exitproc+0xb4>
     f88:	e2843002 	add	r3, r4, #2
     f8c:	e2844001 	add	r4, r4, #1
     f90:	e78c1103 	str	r1, [r12, r3, lsl #2]
     f94:	e58c4004 	str	r4, [r12, #4]
     f98:	e3a00000 	mov	r0, #0
     f9c:	e28dd010 	add	sp, sp, #16
     fa0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     fa4:	e12fff1e 	bx	lr
     fa8:	e3a00001 	mov	r0, #1
     fac:	e1a00410 	lsl	r0, r0, r4
     fb0:	e08c8104 	add	r8, r12, r4, lsl #2
     fb4:	e3560002 	cmp	r6, #2
     fb8:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
     fbc:	e5883108 	str	r3, [r8, #264]	; 0x108
     fc0:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
     fc4:	e1877000 	orr	r7, r7, r0
     fc8:	01830000 	orreq	r0, r3, r0
     fcc:	e1a05008 	mov	r5, r8
     fd0:	e5882088 	str	r2, [r8, #136]	; 0x88
     fd4:	e58c7188 	str	r7, [r12, #392]	; 0x188
     fd8:	058c018c 	streq	r0, [r12, #396]	; 0x18c
     fdc:	eaffffe9 	b	f88 <__register_exitproc+0x94>
     fe0:	000012c0 	.word	0x000012c0
     fe4:	00000000 	.word	0x00000000

00000fe8 <__call_exitprocs>:
     fe8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     fec:	e59f3168 	ldr	r3, [pc, #360]	; 115c <__call_exitprocs+0x174>
     ff0:	e5933000 	ldr	r3, [r3]
     ff4:	e24dd014 	sub	sp, sp, #20
     ff8:	e58d3004 	str	r3, [sp, #4]
     ffc:	e2833f52 	add	r3, r3, #328	; 0x148
    1000:	e58d0008 	str	r0, [sp, #8]
    1004:	e58d300c 	str	r3, [sp, #12]
    1008:	e1a07001 	mov	r7, r1
    100c:	e3a08001 	mov	r8, #1
    1010:	e59d3004 	ldr	r3, [sp, #4]
    1014:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    1018:	e3560000 	cmp	r6, #0
    101c:	e59db00c 	ldr	r11, [sp, #12]
    1020:	0a000033 	beq	10f4 <__call_exitprocs+0x10c>
    1024:	e5965004 	ldr	r5, [r6, #4]
    1028:	e2554001 	subs	r4, r5, #1
    102c:	5286a088 	addpl	r10, r6, #136	; 0x88
    1030:	5285501f 	addpl	r5, r5, #31
    1034:	508a5105 	addpl	r5, r10, r5, lsl #2
    1038:	5a000007 	bpl	105c <__call_exitprocs+0x74>
    103c:	ea000029 	b	10e8 <__call_exitprocs+0x100>
    1040:	e5953000 	ldr	r3, [r5]
    1044:	e1530007 	cmp	r3, r7
    1048:	0a000005 	beq	1064 <__call_exitprocs+0x7c>
    104c:	e2444001 	sub	r4, r4, #1
    1050:	e3740001 	cmn	r4, #1
    1054:	e2455004 	sub	r5, r5, #4
    1058:	0a000022 	beq	10e8 <__call_exitprocs+0x100>
    105c:	e3570000 	cmp	r7, #0
    1060:	1afffff6 	bne	1040 <__call_exitprocs+0x58>
    1064:	e5963004 	ldr	r3, [r6, #4]
    1068:	e06a2005 	rsb	r2, r10, r5
    106c:	e2433001 	sub	r3, r3, #1
    1070:	e0862002 	add	r2, r6, r2
    1074:	e1530004 	cmp	r3, r4
    1078:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    107c:	13a01000 	movne	r1, #0
    1080:	05864004 	streq	r4, [r6, #4]
    1084:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1088:	e3530000 	cmp	r3, #0
    108c:	0affffee 	beq	104c <__call_exitprocs+0x64>
    1090:	e1a02418 	lsl	r2, r8, r4
    1094:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    1098:	e1120001 	tst	r2, r1
    109c:	e5969004 	ldr	r9, [r6, #4]
    10a0:	0a000016 	beq	1100 <__call_exitprocs+0x118>
    10a4:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    10a8:	e1120001 	tst	r2, r1
    10ac:	1a000016 	bne	110c <__call_exitprocs+0x124>
    10b0:	e59d0008 	ldr	r0, [sp, #8]
    10b4:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    10b8:	e1a0e00f 	mov	lr, pc
    10bc:	e12fff13 	bx	r3
    10c0:	e5963004 	ldr	r3, [r6, #4]
    10c4:	e1530009 	cmp	r3, r9
    10c8:	1affffd0 	bne	1010 <__call_exitprocs+0x28>
    10cc:	e59b3000 	ldr	r3, [r11]
    10d0:	e1530006 	cmp	r3, r6
    10d4:	1affffcd 	bne	1010 <__call_exitprocs+0x28>
    10d8:	e2444001 	sub	r4, r4, #1
    10dc:	e3740001 	cmn	r4, #1
    10e0:	e2455004 	sub	r5, r5, #4
    10e4:	1affffdc 	bne	105c <__call_exitprocs+0x74>
    10e8:	e59f1070 	ldr	r1, [pc, #112]	; 1160 <__call_exitprocs+0x178>
    10ec:	e3510000 	cmp	r1, #0
    10f0:	1a000009 	bne	111c <__call_exitprocs+0x134>
    10f4:	e28dd014 	add	sp, sp, #20
    10f8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    10fc:	e12fff1e 	bx	lr
    1100:	e1a0e00f 	mov	lr, pc
    1104:	e12fff13 	bx	r3
    1108:	eaffffec 	b	10c0 <__call_exitprocs+0xd8>
    110c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1110:	e1a0e00f 	mov	lr, pc
    1114:	e12fff13 	bx	r3
    1118:	eaffffe8 	b	10c0 <__call_exitprocs+0xd8>
    111c:	e5963004 	ldr	r3, [r6, #4]
    1120:	e3530000 	cmp	r3, #0
    1124:	e5963000 	ldr	r3, [r6]
    1128:	1a000008 	bne	1150 <__call_exitprocs+0x168>
    112c:	e3530000 	cmp	r3, #0
    1130:	0a000006 	beq	1150 <__call_exitprocs+0x168>
    1134:	e1a00006 	mov	r0, r6
    1138:	e58b3000 	str	r3, [r11]
    113c:	e320f000 	nop	{0}
    1140:	e59b6000 	ldr	r6, [r11]
    1144:	e3560000 	cmp	r6, #0
    1148:	1affffb5 	bne	1024 <__call_exitprocs+0x3c>
    114c:	eaffffe8 	b	10f4 <__call_exitprocs+0x10c>
    1150:	e1a0b006 	mov	r11, r6
    1154:	e1a06003 	mov	r6, r3
    1158:	eafffff9 	b	1144 <__call_exitprocs+0x15c>
    115c:	000012c0 	.word	0x000012c0
    1160:	00000000 	.word	0x00000000

00001164 <register_fini>:
    1164:	e92d4008 	push	{r3, lr}
    1168:	e59f3010 	ldr	r3, [pc, #16]	; 1180 <register_fini+0x1c>
    116c:	e3530000 	cmp	r3, #0
    1170:	159f000c 	ldrne	r0, [pc, #12]	; 1184 <register_fini+0x20>
    1174:	1bffff49 	blne	ea0 <atexit>
    1178:	e8bd4008 	pop	{r3, lr}
    117c:	e12fff1e 	bx	lr
    1180:	000012e8 	.word	0x000012e8
    1184:	00001188 	.word	0x00001188

00001188 <__libc_fini_array>:
    1188:	e92d4038 	push	{r3, r4, r5, lr}
    118c:	e59f5030 	ldr	r5, [pc, #48]	; 11c4 <__libc_fini_array+0x3c>
    1190:	e59f4030 	ldr	r4, [pc, #48]	; 11c8 <__libc_fini_array+0x40>
    1194:	e0654004 	rsb	r4, r5, r4
    1198:	e1b04144 	asrs	r4, r4, #2
    119c:	10855104 	addne	r5, r5, r4, lsl #2
    11a0:	0a000004 	beq	11b8 <__libc_fini_array+0x30>
    11a4:	e5353004 	ldr	r3, [r5, #-4]!
    11a8:	e1a0e00f 	mov	lr, pc
    11ac:	e12fff13 	bx	r3
    11b0:	e2544001 	subs	r4, r4, #1
    11b4:	1afffffa 	bne	11a4 <__libc_fini_array+0x1c>
    11b8:	eb00004a 	bl	12e8 <__libc_fini>
    11bc:	e8bd4038 	pop	{r3, r4, r5, lr}
    11c0:	e12fff1e 	bx	lr
    11c4:	00001300 	.word	0x00001300
    11c8:	00001304 	.word	0x00001304

000011cc <__cs3_premain>:
    11cc:	e92d4008 	push	{r3, lr}
    11d0:	eb000017 	bl	1234 <__libc_init_array>
    11d4:	e59f3030 	ldr	r3, [pc, #48]	; 120c <__cs3_premain+0x40>
    11d8:	e3530000 	cmp	r3, #0
    11dc:	15930000 	ldrne	r0, [r3]
    11e0:	01a00003 	moveq	r0, r3
    11e4:	e59f3024 	ldr	r3, [pc, #36]	; 1210 <__cs3_premain+0x44>
    11e8:	e3530000 	cmp	r3, #0
    11ec:	15931000 	ldrne	r1, [r3]
    11f0:	01a01003 	moveq	r1, r3
    11f4:	e3a02000 	mov	r2, #0
    11f8:	ebfffc17 	bl	25c <main>
    11fc:	e59f3010 	ldr	r3, [pc, #16]	; 1214 <__cs3_premain+0x48>
    1200:	e3530000 	cmp	r3, #0
    1204:	1bffff2d 	blne	ec0 <exit>
    1208:	eafffffe 	b	1208 <__cs3_premain+0x3c>
	...
    1214:	00000ec0 	.word	0x00000ec0

00001218 <_exit>:
    1218:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    121c:	e3a00018 	mov	r0, #24
    1220:	e59f1004 	ldr	r1, [pc, #4]	; 122c <_exit+0x14>
    1224:	ef123456 	svc	0x00123456
    1228:	eafffffe 	b	1228 <_exit+0x10>
    122c:	00020026 	.word	0x00020026

00001230 <__cs3_isr_interrupt>:
    1230:	eafffffe 	b	1230 <__cs3_isr_interrupt>

00001234 <__libc_init_array>:
    1234:	e92d4070 	push	{r4, r5, r6, lr}
    1238:	e59f506c 	ldr	r5, [pc, #108]	; 12ac <__libc_init_array+0x78>
    123c:	e59f606c 	ldr	r6, [pc, #108]	; 12b0 <__libc_init_array+0x7c>
    1240:	e0656006 	rsb	r6, r5, r6
    1244:	e1b06146 	asrs	r6, r6, #2
    1248:	12455004 	subne	r5, r5, #4
    124c:	13a04000 	movne	r4, #0
    1250:	0a000005 	beq	126c <__libc_init_array+0x38>
    1254:	e5b53004 	ldr	r3, [r5, #4]!
    1258:	e2844001 	add	r4, r4, #1
    125c:	e1a0e00f 	mov	lr, pc
    1260:	e12fff13 	bx	r3
    1264:	e1560004 	cmp	r6, r4
    1268:	1afffff9 	bne	1254 <__libc_init_array+0x20>
    126c:	e59f5040 	ldr	r5, [pc, #64]	; 12b4 <__libc_init_array+0x80>
    1270:	e59f6040 	ldr	r6, [pc, #64]	; 12b8 <__libc_init_array+0x84>
    1274:	e0656006 	rsb	r6, r5, r6
    1278:	eb000012 	bl	12c8 <_init>
    127c:	e1b06146 	asrs	r6, r6, #2
    1280:	12455004 	subne	r5, r5, #4
    1284:	13a04000 	movne	r4, #0
    1288:	0a000005 	beq	12a4 <__libc_init_array+0x70>
    128c:	e5b53004 	ldr	r3, [r5, #4]!
    1290:	e2844001 	add	r4, r4, #1
    1294:	e1a0e00f 	mov	lr, pc
    1298:	e12fff13 	bx	r3
    129c:	e1560004 	cmp	r6, r4
    12a0:	1afffff9 	bne	128c <__libc_init_array+0x58>
    12a4:	e8bd4070 	pop	{r4, r5, r6, lr}
    12a8:	e12fff1e 	bx	lr
    12ac:	000012e0 	.word	0x000012e0
    12b0:	000012e0 	.word	0x000012e0
    12b4:	000012e0 	.word	0x000012e0
    12b8:	000012e8 	.word	0x000012e8

Disassembly of section .rodata:

000012c0 <_global_impure_ptr>:
    12c0:	00001328 00000043                       (...C...

000012c8 <_init>:
    12c8:	e1a0c00d 	mov	r12, sp
    12cc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    12d0:	e24cb004 	sub	r11, r12, #4
    12d4:	e24bd028 	sub	sp, r11, #40	; 0x28
    12d8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    12dc:	e12fff1e 	bx	lr

000012e0 <__init_array_start>:
    12e0:	00001164 	.word	0x00001164

000012e4 <__frame_dummy_init_array_entry>:
    12e4:	00000208                                ....

000012e8 <__libc_fini>:
    12e8:	e1a0c00d 	mov	r12, sp
    12ec:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    12f0:	e24cb004 	sub	r11, r12, #4
    12f4:	e24bd028 	sub	sp, r11, #40	; 0x28
    12f8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    12fc:	e12fff1e 	bx	lr

00001300 <__fini_array_start>:
    1300:	000001c4 	.word	0x000001c4

00001304 <__cs3_regions>:
    1304:	00000000 	.word	0x00000000
    1308:	00000040 	.word	0x00000040
    130c:	00000040 	.word	0x00000040
    1310:	00001718 	.word	0x00001718
    1314:	00000020 	.word	0x00000020
